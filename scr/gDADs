#!/usr/bin/python3

# IMPORT REQUIRED MODULES #####################################################
import sqlite3
import argparse
from pathlib import Path
import re


# PATH & FILE DEFINING ########################################################
path = Path(__file__).resolve().parent.parent  # Set to script dirs
                                               # parent dir.
db_file = sorted(Path(path).glob('*/*.sqlite'))[0]  # Find and assign
                                                    # database file.
outdir = Path(path)/"rst"
outdir.mkdir(parents=True, exist_ok=True)  # If the subdir "rst" does
                                           # not exit create it.


# ARGUMENT PARSER #############################################################
prog_usage = '''
The gene-disease association database search-tool (gDADs) interacts with the data stored within the gDAD database (DB) associated with the software. The primary function takes a list of genes, compares their IDs to those in the DB, and outputs the associated diseases. Options to see all diseases within the DB, as well as check for genes associated to a specific search term, are also available.
             '''
parser = argparse.ArgumentParser(description=prog_usage)
parser.add_argument(
                    '-v',
                    '--version',
                    action='version',
                    version='%(prog)s 1.0'
                    )
parser.add_argument(
                    '-a',
                    dest='get_associations',
                    action='store_true',
                    help='output all diseases in the database to diseases.txt'
                    )
parser.add_argument(
                    '-i',
                    dest='infile',
                    metavar='<input_file>',
                    help='list of genes, one per line; with default input ' +
                         'format is gene symbol'
                    )
parser.add_argument(
                    '-I',
                    dest='identifier',
                    metavar='<input_format>',
                    help='use to specify alternate input format, where the ' +
                         'available choices are "entrez_id", "ensembl_id", ' +
                         '"uniprot_acc", or "swissprot_id"',
                    default='gene_symbol'
                    )
parser.add_argument(
                    '-g',
                    dest='go',
                    metavar='<ontology_domain>',
                    help='perform enrichment analysis on <input_file> genes ' +
                         'and output the specified GO ontology terms for any' +
                         ' hits. Specify with "go_process", "go_functions", ' +
                         'or "go_compartment")'
                    )
parser.add_argument(
                    '-s',
                    dest='search_term',
                    metavar='"term"',
                    help='check for disease associations in the database ' +
                         'containing <search_term>, and output associated' +
                         ' genes to <search_term>_associations.tab'
                    )
parser.add_argument(
                    '--silence_association',
                    dest='silent',
                    action='store_true',
                    help='supress standard output, should be specified if ' +
                         'using [-g <ontology_domain>] if only output from' +
                         ' this option is required'
                    )
args = parser.parse_args()


# OPEN DATABASE FOR INTERACTION ###############################################
con = sqlite3.connect(str(db_file))  # Connect to the database.
cur = con.cursor()  # Initialize cursor object.


# SOFTWARE CODE ###############################################################
if args.get_associations:  # If argument [-a] is specified.
    # Prints all associated diseases found within the database.
    diseases = []
    disease_file = str(outdir) + '/diseases.txt'  # Assign output file.
    statement = 'SELECT associations FROM gene_disease_associations'
    for row in cur.execute(statement).fetchall():
        # Iterate over all items, split them on the predefined delimiter,
        # and populate the diseases list.
        diseases.extend(row[0].split('|'))
    diseases = sorted(set(diseases))  # Remove duplicates.
    with open(disease_file, 'w') as out_file:
        for disease in diseases:
            print(disease, sep='n', file=out_file)

if args.infile:  # If argument [-i <input_file>] is specified.
    # Check for assiciations for the genes of the requested format
    # (specified with [-I]; default gene_symbol), and output file to rst/.
    # Below variable is assigned output path.
    association_file = str(outdir/Path(args.infile).stem) + '_associations.txt'
    hits = []  # Holds all matches.
    misses = []  # Holds IDs not found in the database.
    format_index = {
                    "entrez_id":1, "gene_symbol":2, "ensembl_id":3,
                    "uniprot_acc":4, "swissprot_id":5
                    }  # Non-default identifier.
    # Read in genes from file, and split into list of tuples.
    genes = [tuple(line.rstrip().split()) for line in open(args.infile, 'r')]
    # Assign statements fed to cursor object.
    statement_1 = 'SELECT * FROM id_table WHERE {}=?'.format(args.identifier)
    statement_2 = 'SELECT associations ' \
                  + 'FROM gene_disease_associations ' \
                  + 'WHERE id=?'
    if args.go:  # Only execute if [-g] is specified.
        # Adds a GO term output file to rst/, based on input ontology domain.
        # Below variable is assigned output path.
        go_file = str(outdir/Path(args.infile).stem) + '_{}.txt'.format(args.go)
        statement_3 = 'SELECT go_ids FROM {} WHERE id=?'. format(args.go)
    for gene in genes:
        # Check for gene input hits, and store in list.
        cur.execute(statement_1, gene)
        hits.append(cur.fetchone())
        if hits[-1] == None:
            # Store genes not found within the database in list.
            misses.append(str(gene).strip('()').strip("',") + ', ')
    if misses:
        # Inform user on genes that weren't found in the database.
        print('No associations were found for {}.'.format(
              ''.join(misses).strip(", ")))
    if args.silent != True:  # Skipped if [--silence_association] is
                             # specified.
        with open(association_file, 'w') as out_association:
            # Iterate over list of calls made to database, and write hits to
            # the output file.
            for hit in hits:
                if hit != None:  # Ignores gene IDs not in the database.
                    # Print the required output to the assigned file, after
                    # making the relevant secondary database check.
                    cur.execute(statement_2, tuple(hit[0].split()))
                    print(hit[format_index[args.identifier]],
                          ''.join(cur.fetchone()).replace('|',
                                '\n' + hit[format_index[args.identifier]] + '\t'
                                ),
                          sep='\t',
                          file=out_association
                          )

    if args.go:  # Only executes if [-g] was specified.
        # Writes the requested ontology domain GO terms.
        with open(go_file, 'w') as out_go:
            for hit in hits:
                if hit != None:  # Ignores gene IDs not in the database.
                    # Print the required output to the assigned file, after
                    # making the relevant secondary database check.
                    cur.execute(statement_3, tuple(hit[0].split()))
                    print(hit[format_index[args.identifier]],
                          ''.join(cur.fetchone()).replace('|',
                                '\n' + hit[format_index[args.identifier]] + '\t'
                                ),
                          sep='\t',
                          file=out_go
                          )

if args.search_term:  # If argument [-s "term"] is specified.
    # Uses the specified "term" to perform a search of the
    # associated diseases, and outputs tab-delimited gene-match pairs
    # to the search_file.
    search_file = str(outdir) + '/' + args.search_term + '_search_hits.txt'
    statement = 'SELECT i.gene_symbol, g.associations ' \
                + 'FROM gene_disease_associations g ' \
                + 'INNER JOIN id_table i ' \
                + 'ON g.id=i.id ' \
                + 'WHERE g.associations LIKE ?'
    # The search is executed in two phases, where (i) the search term is
    # first used in a query to the database,
    cur.execute(statement, tuple(('%' + args.search_term + '%').split()))
    with open(search_file, 'w') as out_file:
        for hit in cur:
            gene = hit[0]
            # and (ii) then used to extract the full disease association
            # matching the initial hit.
            association_hit = re.findall(('.*(?i)' + args.search_term + '.*'),
                                         hit[1].replace('|', '\n')
                                         )
            for disease in association_hit:
                    print(gene, disease, sep='\t', file=out_file)

con.close()  # Close connection to database.
